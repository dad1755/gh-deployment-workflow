[
  {
    "tag": "Monitoring",
    "title": "Prometheus & Grafana",
    "description": "Deployed Prometheus and Grafana for system monitoring on 3 VMs via Cockpit.",
    "stats": "1500"
  },
  {
    "tag": "CI/CD",
    "title": "Portfolio Website with CI/CD",
    "description": "Designed a portfolio using HTML, Tailwind CSS, and JavaScript. Automated CI/CD with Jenkins from GitHub to production.",
    "stats": "1500"
  },
  {
    "tag": "Deployment",
    "title": "GLPI Deployment on Docker",
    "description": "Containerized GLPI for scalable asset management and enterprise deployment.",
    "stats": "800"
  },
  {
    "tag": "Monitoring",
    "title": "Nagios Server Monitoring",
    "description": "Implemented Nagios to monitor 147 production servers, ensuring high availability and performance.",
    "stats": "600"
  },
  {
    "tag": "Deployment",
    "title": "Install Fedora-Server from Kickstart",
    "description": "Automated Fedora installation using Kickstart with disk, network, and console preconfiguration.",
    "stats": "800"
  },
  {
    "tag": "Scripting - Self Pace",
    "title": "EC2 Instance Check",
    "description": "Python script using Boto3 to check EC2 status and save reports with timestamps.",
    "code": "#!/usr/bin/env python3\nimport os\nimport boto3\nfrom datetime import datetime\n\nwith open('instance_ids.txt', 'r') as file:\n  instance_ids = [line.strip('\"\\n') for line in file]\n\nec2 = boto3.client('ec2')\ncurrent_time = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\noutput_dir = \"ec2-status\"\nos.makedirs(output_dir, exist_ok=True)\noutput_file_path = os.path.join(output_dir, f\"ec2_status_{current_time}.txt\")\nresponse = ec2.describe_instances(InstanceIds=instance_ids)\n\nwith open(output_file_path, 'w') as output_file:\n  for reservation in response['Reservations']:\n      for instance in reservation['Instances']:\n          instance_id = instance['InstanceId']\n          state = instance['State']['Name']\n          name = \"N/A\"\n          if 'Tags' in instance:\n              for tag in instance['Tags']:\n                  if tag['Key'] == 'Name':\n                      name = tag['Value']\n                      break\n          output_file.write(f\"Instance {instance_id} ({name}) is {state}\\n\")\n\nprint(f\"[âœ“] EC2 status written to: {output_file_path}\")",
    "stats": "200"
  },
  {
    "tag": "Deployment",
    "title": "Kubernetes",
    "description": "Deployed Kubernetes on Fedora Server. [GitHub](https://github.com/dad1755/k8sonfedora)",
    "stats": "600"
  },
  {
    "tag": "Deployment",
    "title": "Wazuh SIEM Implementation",
    "description": "Deployed Wazuh for log analysis and intrusion detection to enhance security monitoring.",
    "stats": "600"
  },
  {
    "tag": "System Development",
    "title": "Expense Tracking System",
    "description": "C#/MySQL-based system for tracking construction project expenses efficiently.",
    "stats": "600"
  },
  {
    "tag": "Deployment",
    "title": "E-commerce Website with AWS Lightsail",
    "description": "Built a scalable e-commerce site using WordPress on AWS Lightsail.",
    "stats": "600"
  },
  {
    "tag": "CLI",
    "title": "Nginx Log Analyser",
    "description": "CLI tool to parse Nginx logs for traffic insights and error tracking.",
    "stats": "600"
  },
  {
    "tag": "CLI",
    "title": "Log Archive Tool",
    "description": "Built a CLI utility to compress and archive system log files.",
    "stats": "600"
  },
  {
    "tag": "CI/CD",
    "title": "rsync Update",
    "description": "Implemented CI/CD pipeline using rsync for remote file synchronization.",
    "stats": "600"
  },
  {
    "tag": "CI/CD",
    "title": "GitHub Pages",
    "description": "Automated deployment of static websites to GitHub Pages using GitHub Actions.",
    "stats": "600"
  },
  {
    "tag": "DNS",
    "title": "DNS Basic Setup",
    "description": "Configured A, CNAME, and MX DNS records for domain management.",
    "stats": "600"
  },
  {
    "tag": "Deployment",
    "title": "Node.js + Ansible",
    "description": "Automated Node.js server deployment using Ansible playbooks.",
    "stats": "600"
  },
  {
    "tag": "Deployment",
    "title": "Drupal + Ansible",
    "description": "Deployed a Drupal server with Ansible ensuring repeatable, consistent setup.",
    "stats": "600"
  }
]
